<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡¶≤‡¶ó‡¶á‡¶® - ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø-‡¶ü‡ßá‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .card {
            box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        @media (max-width: 640px) {
            .responsive-padding {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="min-h-screen flex items-center justify-center responsive-padding p-4 sm:p-6 md:p-8">
        <div class="w-full max-w-md p-6 sm:p-8 space-y-6 bg-white rounded-xl card transition-all duration-300">
            
            <header class="text-center">
                <h2 class="text-3xl font-bold text-gray-900">
                    ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ
                </h2>
                <p class="text-sm text-gray-600 mt-1">
                    ‡¶á‡¶Æ‡ßá‡¶≤ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
                </p>
            </header>

            <!-- Error/Success Message Area -->
            <div id="message-area" class="p-3 rounded-md text-sm transition-all duration-300 hidden" role="alert"></div>

            <form id="login-form" class="space-y-6">
                @csrf
                
                <!-- Hidden input to store step 2 method (password/otp) -->
                <input type="hidden" id="step_2_method_input" name="step_2_method" value="password">
                
                <!-- Step 1: Email or Phone -->
                <div id="step-1">
                    <label for="login_key" class="block text-sm font-medium text-gray-700 mb-2">
                        ‡¶á‡¶Æ‡ßá‡¶≤ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞
                    </label>
                    <input id="login_key" name="login_key" type="text" autocomplete="username" 
                        class="appearance-none block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm transition duration-150"
                        placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶≤ ‡¶¨‡¶æ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®">
                    
                    <button id="next-button" type="submit" disabled
                        class="w-full mt-6 flex justify-center py-2.5 px-4 border border-transparent rounded-lg shadow-md text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out disabled:bg-indigo-400 disabled:cursor-not-allowed">
                        ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
                    </button>
                </div>

                <!-- Step 2: Password / OTP (Initially hidden) -->
                <div id="step-2" class="hidden">
                    <div class="flex justify-between items-center mb-2">
                        <!-- üí° ‡¶°‡¶æ‡¶á‡¶®‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶≤‡ßá‡¶¨‡ßá‡¶≤ -->
                        <label id="password-label" for="password" class="block text-sm font-medium text-gray-700">
                            ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°
                        </label>
                        <button type="button" id="change-key-button" class="text-xs text-indigo-600 hover:text-indigo-800 transition duration-150">
                            ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (<span id="display-key" class="font-semibold text-gray-600"></span>)
                        </button>
                    </div>
                    
                    <!-- üí° ‡¶°‡¶æ‡¶á‡¶®‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° -->
                    <input id="password" name="password" type="password" autocomplete="current-password" 
                        class="appearance-none block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm transition duration-150"
                        placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶®">
                    
                    <button id="login-button" type="submit" disabled
                        class="w-full mt-6 flex justify-center py-2.5 px-4 border border-transparent rounded-lg shadow-md text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out disabled:bg-green-400 disabled:cursor-not-allowed">
                        ‡¶≤‡¶ó‡¶á‡¶®
                    </button>
                </div>

            </form>
        </div>
    </div>

    <script>
        const form = document.getElementById('login-form');
        const loginKeyInput = document.getElementById('login_key');
        const passwordInput = document.getElementById('password');
        const nextButton = document.getElementById('next-button');
        const loginButton = document.getElementById('login-button');
        const step1 = document.getElementById('step-1');
        const step2 = document.getElementById('step-2');
        const messageArea = document.getElementById('message-area');
        const changeKeyButton = document.getElementById('change-key-button');
        const displayKeySpan = document.getElementById('display-key');
        const passwordLabel = document.getElementById('password-label');
        const step2MethodInput = document.getElementById('step_2_method_input');

        let currentStep = 1;
        let lastResponse = null; // response is not defined ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        
        // üí° ‡¶∞‡¶æ‡¶â‡¶ü ‡¶®‡¶æ‡¶Æ
        const IDENTIFY_ROUTE = '{{ route('login.identify') }}'; 
        const FINALIZE_ROUTE = '{{ route('login.finalize') }}'; 

        // --- Helper Functions ---

        /** ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ */
        function updateButtonState() {
            if (currentStep === 1) {
                nextButton.disabled = loginKeyInput.value.trim() === '';
            } else if (currentStep === 2) {
                loginButton.disabled = passwordInput.value.trim() === ''; 
            }
        }

        /** ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ */
        function setLoading(button, isLoading, defaultText) {
            nextButton.disabled = loginButton.disabled = isLoading;
            button.textContent = isLoading ? '‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...' : defaultText;
            
            // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ
            loginKeyInput.disabled = isLoading;
            passwordInput.disabled = isLoading;
            changeKeyButton.disabled = isLoading;
        }

        /** ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ */
        function displayMessage(message, type = 'error') {
            messageArea.textContent = message;
            messageArea.classList.remove('hidden', 'bg-red-100', 'text-red-700', 'bg-green-100', 'text-green-700');
            
            if (type === 'error') {
                messageArea.classList.add('bg-red-100', 'text-red-700');
            } else {
                messageArea.classList.add('bg-green-100', 'text-green-700');
            }
            messageArea.classList.remove('hidden');
        }

        /** ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®‡ßã */
        function hideMessage() {
            messageArea.classList.add('hidden');
        }

        /** ‡¶°‡¶æ‡¶á‡¶®‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶≤‡ßá‡¶¨‡ßá‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ */
        function setDynamicFields(step2Method) {
            const isPassword = step2Method === 'password';
            
            // ‡¶≤‡ßá‡¶¨‡ßá‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: OTP ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°
            passwordLabel.textContent = isPassword ? '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°' : 'OTP';
            
            // ‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
            passwordInput.placeholder = isPassword ? '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶®' : '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ OTP ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶®';

            // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ü‡¶æ‡¶á‡¶™ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            passwordInput.type = isPassword ? 'password' : 'text';
            passwordInput.setAttribute('autocomplete', isPassword ? 'current-password' : 'one-time-code');
            passwordInput.setAttribute('inputmode', isPassword ? 'text' : 'numeric');
        }

        // --- Event Listeners ---
        
        loginKeyInput.addEventListener('input', updateButtonState);
        passwordInput.addEventListener('input', updateButtonState);
        window.addEventListener('load', updateButtonState);
        
        // ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï (‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ßß ‡¶è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ)
        changeKeyButton.addEventListener('click', () => {
            if (loginKeyInput.disabled) return; 

            currentStep = 1;
            step1.classList.remove('hidden');
            step2.classList.add('hidden');
            passwordInput.value = ''; 
            loginKeyInput.focus();
            hideMessage();
            updateButtonState();

            // üí° ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ßß ‡¶è‡¶∞ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶è‡¶®‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ
            loginKeyInput.disabled = false;
        });


        // --- Form Submission Logic ---

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            hideMessage();

            const formData = new FormData(form);
            let url, button, defaultText;
            let currentButton;
            lastResponse = null; // ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
            
            if (currentStep === 1) {
                url = IDENTIFY_ROUTE;
                button = nextButton;
                defaultText = '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ';
                currentButton = nextButton;
            } else {
                url = FINALIZE_ROUTE;
                button = loginButton;
                defaultText = '‡¶≤‡¶ó‡¶á‡¶®';
                currentButton = loginButton;
            }

            setLoading(currentButton, true, defaultText);
            
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="_token"]').value
                    },
                    body: formData,
                });

                lastResponse = response; // response ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                let data;
                const contentType = response.headers.get("content-type");
                
                // 404 (Not Found) ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
                if (response.status === 404) {
                    throw new Error('404: Route Not Found. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
                }
                
                if (response.status === 302 || !contentType || !contentType.includes("application/json")) {
                    throw new Error('‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßá‡¶ú ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
                }
                
                data = await response.json();
                
                if (response.ok) {
                    // ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏
                    if (currentStep === 1) {
                        // ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ßß ‡¶∏‡¶´‡¶≤: ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ß® ‡¶§‡ßá ‡¶Ø‡¶æ‡¶ì
                        currentStep = 2;
                        step1.classList.add('hidden');
                        step2.classList.remove('hidden');
                        
                        // ‡¶°‡¶æ‡¶á‡¶®‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ß® ‡¶Æ‡ßá‡¶•‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
                        setDynamicFields(data.step_2_method); 
                        step2MethodInput.value = data.step_2_method; // Hidden ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
                        
                        // üí° ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ßß ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∏‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                        loginKeyInput.disabled = true;
                        
                        // ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶®‡¶∞‡ßç‡¶Æ‡¶æ‡¶≤ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ü‡¶ø ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
                        displayKeySpan.textContent = data.login_key_value; 
                        
                        passwordInput.value = ''; 
                        passwordInput.focus();
                        displayMessage(data.message, 'success');
                        
                        setLoading(currentButton, false, defaultText); // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ
                        updateButtonState();

                    } else {
                        // ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡ß® ‡¶∏‡¶´‡¶≤: ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®, ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßã
                        displayMessage(data.message, 'success');
                        
                        // ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã
                        setTimeout(() => {
                            window.location.href = data.redirect_url || '{{ route('dashboard') }}'; 
                        }, 1000); 
                        
                        return; // ‡¶´‡¶ø‡¶®‡¶ø‡¶∂‡¶°
                    }
                } else {
                    // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶° ‡¶è‡¶∞‡¶∞ (4xx/5xx)
                    let errorMsg = data.message || '‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§';
                    if (data.errors) {
                        errorMsg = Object.values(data.errors)[0][0]; 
                    }
                    displayMessage(errorMsg, 'error');
                }

            } catch (error) {
                console.error('Login Error:', error);
                displayMessage(error.message || '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§', 'error');
            } finally {
                // üí° response is not defined ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã: lastResponse ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
                if (currentStep === 1 || !lastResponse || !lastResponse.ok) {
                    setLoading(currentButton, false, defaultText);
                    updateButtonState();
                }
            }
        });
    </script>
</body>
</html>
